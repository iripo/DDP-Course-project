library(rpart.plot);
library(RColorBrewer)
library(rattle);
library(randomForest);
library(knitr)
set.seed(12341)
trnUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
tstUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
datatrain <- tbl_df(read.csv(trnUrl, na.strings=c("NA","#DIV/0!","")))
datatest <- tbl_df(read.csv(tstUrl, na.strings=c("NA","#DIV/0!","")))
trainset <- datatrain[,colSums(is.na(datatrain)) < 0.8*dim(datatrain)[1]]
testset <-  datatest[,colSums(is.na(datatest)) < 0.8*dim(datatest)[1]]
trainset <- select(trainset, 8:60)
testset <- select(testset, 8:60)
inTrain <- createDataPartition(trainset$classe, p=0.6, list=FALSE)
training <- trainset[inTrain, ]
testing <- trainset[-inTrain, ]
dim(training); dim(testing)
modFit <- train(classe ~ .,method="rpart",data=training)
pr1 <- predict(modFit,newdata=training)
confusionMatrix(pr1,training$classe)
View(training)
tr1 <- training[-53, ]
modFit <- train(classe ~ .,method="rpart",data=tr1)
pr1 <- predict(modFit,newdata=tr1)
confusionMatrix(pr1,tr1$classe)
tr1 <- as.numeric(training)
structure(training)
tr1 <- as.numeric(tr1)
training[53,] <- as.numeric(training[53,])
View(training)
structure(training)
training[53,] <- as.factor(training[53,])
training[53,] <- as.numeric(levels(training$classe))[training$classe]
training$classe <- as.numeric(levels(training$classe))[training$classe]
View(training)
training$classe <- as.numeric(levels(training$classe))
training <- trainset[inTrain, ]
training$classe <- as.numeric(levels(training$classe)) [as.integer(training$classe)]
training <- trainset[inTrain, ]
View(training)
str(training$classe)
qq <-as.numeric(training$classe)
qq
training$classe <-as.numeric(training$classe)
modFit <- train(classe ~ .,method="rpart",data=training)
pr1 <- predict(modFit,newdata=training)
confusionMatrix(pr1,training$classe)
library(caret)
library(randomForest)
cpTrain<-data.frame(read.csv("pml-training.csv"))
View(cpTrain[1:10,])
cpTest<-data.frame(read.csv("pml-testing.csv"))
View(cpTest)
str(cpTrain)
cpGood<-complete.cases(training)
str(training[cpGood,])
rf1<-randomForest(classe~.,data=traininig, ntrees=200)
rf1
rf1<-randomForest(classe~.,data=training, ntrees=200)
preObj <- preProcess(training[,-53],method=c("center","scale"))
modFit <- train(classe ~ .,preProcess = c("center", "scale"),method="rpart",data=training)
pr1 <- predict(modFit,newdata=training)
confusionMatrix(pr1,training$classe)
preObj <- preProcess(training[,-53],method="knnImpute")
modFitA1 <- rpart(classe ~ ., data=training, method="class")
fancyRpartPlot(modFitA1)
predictionsA1 <- predict(modFitA1, testing, type = "class")
confusionMatrix(predictionsA1, testing$classe)
class(testing)
class(testing[1:53,])
class(testing[1,])
class(testing[1])
class(training[54])
class(training[,1:53])
M <- abs(cor(training[,-53]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
preProc <- preProcess(training[,-53],method="pca",pcaComp=2)
qq <- predict(preProc, training[,-53])
View(qq)
modelFit <- train(training$classe ~ .,method="rpart",data=qq)
pr1 <- predict(modelFit,newdata=training)
confusionMatrix(pr1,training$classe)
fitControl <- trainControl(method="cv", number=3, verboseIter=F)
fit <- train(classe ~ ., data=training, method="rf", trControl=fitControl)
library(dplyr);
library(caret);
library(rpart);
set.seed(12341)
trnUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
tstUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
datatrain <- tbl_df(read.csv(trnUrl, na.strings=c("NA","#DIV/0!","")))
datatest <- tbl_df(read.csv(tstUrl, na.strings=c("NA","#DIV/0!","")))
summary(trainset)
summary(testset)
#remove columns with 80% NAs
trainset <- datatrain[,colSums(is.na(datatrain)) < 0.8*dim(datatrain)[1]]
testset <-  datatest[,colSums(is.na(datatest)) < 0.8*dim(datatest)[1]]
#some variables that don't seems to be predictors I remove from the datasets: first seven vars.
trainset <- select(trainset, 8:60)
testset <- select(testset, 8:60)
fitControl <- trainControl(method = "cv",
number = 5,
repeats = 5)
ModFit <- train(classe ~ ., data = training,
method = "gbm",
trControl = fitControl,
preProc = c("center", "scale"))
ModFit
inTrain <- createDataPartition(trainset$classe, p=0.6, list=FALSE)
training <- trainset[inTrain, ]
testing <- trainset[-inTrain, ]
dim(training); dim(testing)
summary(training)
fitControl <- trainControl(method = "cv",
number = 5,
repeats = 5)
ModFit <- train(classe ~ ., data = training,
method = "gbm",
trControl = fitControl,
preProc = c("center", "scale"))
fitControl <- trainControl(method = "cv", number = 5)
Q
Q
fitControl <- trainControl(method = "cv", number = 5)
ModFit <- train(classe ~ ., data = training,
method = "rpart",
trControl = fitControl,
preProc = c("center", "scale"))
pr1 <- predict(ModFit,newdata=training)
confusionMatrix(pr1,training$classe)
ModFit <- train(classe ~ ., data = training,
method = "rpart",
trControl = fitControl,
preProc = c("center", "scale", "knnImpute"))
pr1 <- predict(ModFit,newdata=training)
confusionMatrix(pr1,training$classe)
fitControl <- trainControl(method = "cv", number = 2, verboseIter=F)
ModFit <- train(classe ~ ., data = training,
method = "rf", n.trees=10,
trControl = fitControl,
preProc = c("center", "scale", "knnImpute"))
fitControl <- trainControl(method = "cv",
number = 2)
gbmFit1 <- train(classe ~ ., data = training,
method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFit1
fitControl <- trainControl(method = "cv",
number = 5)
gbmFit1 <- train(classe ~ ., data = training,
method = "gbm",
trControl = fitControl,
verbose = FALSE)
gbmFit1
fitControl <- trainControl(method = "cv",
number = 3)
gbmFit1 <- train(classe ~ ., data = training,
method = "rpart",
trControl = fitControl,
verbose = FALSE)
gbmFit1
fitControl <- trainControl(method = "cv",
number = 3)
gbmFit1 <- train(classe ~ ., data = training,
method = "rpart",
preProc = c("center", "scale", "knnImpute")
trControl = fitControl,
verbose = FALSE)
fitControl <- trainControl(method = "cv",
number = 3)
gbmFit1 <- train(classe ~ ., data = training,
method = "rpart",
preProc = c("center", "scale", "knnImpute"),
trControl = fitControl,
verbose = FALSE)
gbmFit1
fitControl <- trainControl(method = "cv",
number = 3)
gbmFit1 <- train(classe ~ ., data = training,
method = "rpart",
preProc = c("center", "scale", "knnImpute"),
trControl = fitControl)
gbmFit1
complete.cases(training)
length(complete.cases(training))
tr1 <- trainset[complete.cases(trainset)==T,]
length(complete.cases(trainset))
tr1 <- trainset[complete.cases(training)==T,]
View(tr1)
tr1 <- training[complete.cases(training)==T,]
trainset <- datatrain[,colSums(is.na(datatrain)) < 0.6*dim(datatrain)[1]]
testset <-  datatest[,colSums(is.na(datatest)) < 0.6*dim(datatest)[1]]
set.seed(12341)
trnUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
tstUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
datatrain <- tbl_df(read.csv(trnUrl, na.strings=c("NA","#DIV/0!","")))
datatest <- tbl_df(read.csv(tstUrl, na.strings=c("NA","#DIV/0!","")))
trainset <- datatrain[,colSums(is.na(datatrain)) < 0.8*dim(datatrain)[1]]
testset <-  datatest[,colSums(is.na(datatest)) < 0.8*dim(datatest)[1]]
trainset <- select(trainset, 8:60)
testset <- select(testset, 8:60)
inTrain <- createDataPartition(trainset$classe, p=0.6, list=FALSE)
training <- trainset[inTrain, ]
testing <- trainset[-inTrain, ]
fitControl <- trainControl(method = "cv",
number = 2)
gbmFit1 <- train(classe ~ ., data = training,
method = "rf",
preProc = c("center", "scale", "knnImpute"),
trControl = fitControl)
fitControl <- trainControl(method = "cv",
number = 50)
gbmFit1 <- train(classe ~ ., data = training,
method = "rf",
preProc = c("center", "scale", "knnImpute"),
trControl = fitControl)
nzv <- nearZeroVar(trainset)
trainset <- trainset[, -nzv]
test <- testset[, -nzv]
trainset <- datatrain[,colSums(is.na(datatrain)) < 0.8*dim(datatrain)[1]]
testset <-  datatest[,colSums(is.na(datatest)) < 0.8*dim(datatest)[1]]
nzv <- nearZeroVar(datatrain)
datatrain <- datatrain[, -nzv]
datatest <- datatest[, -nzv]
trainset <- datatrain[,colSums(is.na(datatrain)) < 0.8*dim(datatrain)[1]]
testset <-  datatest[,colSums(is.na(datatest)) < 0.8*dim(datatest)[1]]
summary(trainset)
summary(testset)
trainset <- select(trainset, 7:60)
testset <- select(testset, 7:60)
nzv <- nearZeroVar(datatrain)
trainset <- datatrain[, -nzv]
testset <- datatest[, -nzv]
datatrain <- tbl_df(read.csv(trnUrl, na.strings=c("NA","#DIV/0!","")))
datatest <- tbl_df(read.csv(tstUrl, na.strings=c("NA","#DIV/0!","")))
```{r, results='hide',cache=TRUE}
# remove variables with nearly zero variance
nzv <- nearZeroVar(datatrain)
trainset <- datatrain[, -nzv]
testset <- datatest[, -nzv]
#remove columns with 80% NAs
trainset <- datatrain[,colSums(is.na(datatrain)) < 0.8*dim(datatrain)[1]]
testset <-  datatest[,colSums(is.na(datatest)) < 0.8*dim(datatest)[1]]
summary(trainset)
summary(testset)
#some variables that don't seems to be predictors I remove from the datasets: first seven vars.
trainset <- select(trainset, 7:59)
testset <- select(testset, 7:59)
#Data partition (trainset)
inTrain <- createDataPartition(trainset$classe, p=0.6, list=FALSE)
training <- trainset[inTrain, ]
testing <- trainset[-inTrain, ]
dim(training); dim(testing)
summary(training)
```
View(trainset)
View(datatrain)
nzv <- nearZeroVar(datatrain)
trainset <- datatrain[, -nzv]
testset <- datatest[, -nzv]
View(trainset)
summary(trainset)
trainset <- datatrain[,colSums(is.na(datatrain)) < 0.8*dim(datatrain)[1]]
testset <-  datatest[,colSums(is.na(datatest)) < 0.8*dim(datatest)[1]]
summary(trainset)
summary(testset)
im(datatrain)[1]
dim(datatrain)[1]
trainset <- datatrain[, -nzv]
testset <- datatest[, -nzv]
trainset <- trainset[,colSums(is.na(trainset)) < 0.8*dim(trainset)[1]]
testset <-  testset[,colSums(is.na(testset)) < 0.8*dim(testset)[1]]
summary(trainset)
summary(testset)
trainset <- select(trainset, 7:59)
View(trainset)
testset <- select(testset, 7:59)
inTrain <- createDataPartition(trainset$classe, p=0.6, list=FALSE)
training <- trainset[inTrain, ]
testing <- trainset[-inTrain, ]
dim(training); dim(testing)
fitControl <- trainControl(method = "cv", number = 10)
gbmFit1 <- train(classe ~ ., data = training[,],
method = "rpart",
preProc = c("center", "scale", "knnImpute"),
trControl = fitControl)
gbmFit1
gbmFit1 <- train(classe ~ ., data = training[,],
method = "rpart",
preProc = c("knnImpute"),
trControl = fitControl)
gbmFit1
fitControl <- trainControl(method = "oob", number = 3, verboseIter=F)
gbmFit1 <- train(classe ~ ., data = training[,],
method = "rf",
preProc = c("knnImpute"),
trControl = fitControl)
gbmFit1
gbmFit1 <- train(classe ~ ., data = training[,],
method = "rf",
trControl = fitControl)
gbmFit1
fitControl <- trainControl(method = "cv", number = 3, verboseIter=F)
gbmFit1 <- train(classe ~ ., data = training[,],
method = "ctree",
trControl = fitControl)
gbmFit1 <- train(classe ~ ., data = training[,],
method = "ctree",
trControl = fitControl)
gbmFit1
plot(gbmFit1)
library(rattle)
fancyRpartPlot(gbmFit1$finalModel)
print(gbmFit1$finalModel)
modelLookup(model = "rpart")
fitControl1 <- trainControl(method = "cv", number = 3, verboseIter=F)
modFit1 <- train(classe ~ ., data = training[,],
method = "rpart",
trControl = fitControl)
fancyRpartPlot(modFit1$finalModel)
modFit1
fitControl2 <- trainControl(method = "oob", number = 3, verboseIter=F)
modFit2 <- train(classe ~ ., data = training[,],
method = "rf",
trControl = fitControl2)
modFit2
modFit <- train(classe ~ ., data = training[,],
method = "rf",
mtry=27)
predict(modFit2,newdata=testing)
pred <- predict(modFit2,testing); testing$predRight <- pred==testing$classe
table(pred,testing$classe)
result <- rfcv(training[,-53],training$classe, cv.fold = 3)
result
modFit2 <- train(classe ~ result, data = training,
method = "rf",
trControl = fitControl2)
modFit2
result <- replicate(3, rfcv(training[,-53],training$classe), simplify=FALSE)
predict(modFit2,newdata=testing)
pred <- predict(modFit2,testing); testing$predRight <- pred==testing$classe
table(pred,testing$classe)
predict(modFit2,newdata=testset)
predictionsB2 <- predict(modFit2, testset, type = "class")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
answ <- predict(modFit2,newdata=testset)
pml_write_files(answ)
getwd()
##Practical Machine Learning Course Project
Irina Nisina
### Summary
In this project load data about personal activity relatively inexpensively. The goal of the project is to predict the manner in which people did the exercise. This is the "classe" variable in the training set. This report describes how I built my model, how used cross validation, what think the expected out of sample error is, and why I made the choices I did.
###Background
Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement – a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, goal is to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).
###Data
The training data for this project are available here:
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
The test data are available here:
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv
### Loading required libraries and data
```{r, cache=TRUE}
library(dplyr);
library(caret);
library(rpart);
set.seed(12341)
trnUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
tstUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
datatrain <- tbl_df(read.csv(trnUrl, na.strings=c("NA","#DIV/0!","")))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.train)
set.seed(33833)
set.seed(33833)
mod1 <- train(y ~.,method="rf",data=vowel.train,trControl = trainControl(method="cv"),number=3)
library("caret", lib.loc="C:/Program Files/R/R-3.1.2/library")
mod1 <- train(y ~.,method="rf",data=vowel.train,trControl = trainControl(method="cv"),number=3)
mod1 <- train(y ~.,method="gbm",data=vowel.train)
mod1 <- train(y ~.,method="gbm",data=vowel.train,trControl = trainControl(method="cv"),number=3)
mod1 <- train(y ~.,method="gbm",data=vowel.train,verbose=FALSE)
mod1 <- train(y ~.,method="rf",data=vowel.train,trControl = trainControl(method="cv"),number=3)
mod2 <- train(y ~.,method="gbm",data=vowel.train,verbose=FALSE)
pred1 <- predict(mod1,testing); pred2 <- predict(mod2,testing)
pred1 <- predict(mod1,vowel.test); pred2 <- predict(mod2,vowel.test)
confusionMatrix(vowel.test$y,pred1)
confusionMatrix(vowel.test$y,pred2)
mod1 <- train(y ~.,method="rf",data=vowel.train,trControl = trainControl(method="cv"),number=3)
mod2 <- train(y ~.,method="gbm",data=vowel.train,verbose=FALSE)
pred1 <- predict(mod1,vowel.test); pred2 <- predict(mod2,vowel.test)
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
predDF <- data.frame(pred1,pred2,y=vowel.test$y)
combModFit <- train(y ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
combPred
confusionMatrix(vowel.test$y,combPred)
confusionMatrix(predDF$y,combModFit)
confusionMatrix(predDF$y,combPred)
library(ElemStatLearn); library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod1 <- train(y ~.,method="rf",data=vowel.train,trControl = trainControl(method="cv"),number=3)
mod2 <- train(y ~.,method="gbm",data=vowel.train,verbose=FALSE)
pred1 <- predict(mod1,vowel.test); pred2 <- predict(mod2,vowel.test)
predDF <- data.frame(pred1,pred2,y=vowel.test$y)
combModFit <- train(y ~.,method="rf",data=predDF)
combPred <- predict(combModFit,vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
confusionMatrix(pred3, comb$y)
confusionMatrix(combPred, comb$y)
confusionMatrix(combPred, predDF$y)
library("slidify", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("devtools", lib.loc="C:/Program Files/R/R-3.1.2/library")
install.packages("devtools")
library("devtools", lib.loc="C:/Program Files/R/R-3.1.2/library")
summary(fit)
fit <- lm(y ~ x1 + x2 + x3)
summary(fit)
#! summary(fit)
?dgamma
&predict
?predict
?colsums
?colSums
?lm
getOption("defaultPackages")
?dgamma
?lm
?predict
DDPQuiz3
install.packages("C:/Program Files/R/R-3.1.2/library/DDPQuiz3_1.0.zip", repos = NULL)
install.packages(c("knitr", "manipulate", "multcomp", "mvtnorm", "nlme", "randomForestSRC", "Rcpp", "RcppEigen", "rJava", "shiny", "tidyr"))
library(DDPQuiz3)
install.packages("C:/Program Files/R/R-3.1.2/library/DDPQuiz3_1.0.zip", repos = NULL)
source('C:/Program Files/R/R-3.1.2/library/DDPQuiz3/R/createmean.R', echo=TRUE)
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
shiny::runApp('H:/coursR/DDP/cp')
set.seed(12344)
modFit <- train(as.numeric(quality)~citric.acid+residual.sugar+chloride, data = Data,method = "lm")
modFit
shiny::runApp('H:/coursR/DDP/cp')
Data <- read.csv2("./data/winequality-red.csv")
Data$fixed.acidity <- as.numeric(as.character(Data$fixed.acidity))
Data$volatile.acidity <- as.numeric(as.character(Data$volatile.acidity))
Data$citric.acid <- as.numeric(as.character(Data$citric.acid))
Data$residual.sugar <- as.numeric(as.character(Data$residual.sugar))
Data$chlorides <- as.numeric(as.character(Data$chlorides))
Data$free.sulfur.dioxide <- as.numeric(as.character(Data$free.sulfur.dioxide))
Data$total.sulfur.dioxide <- as.numeric(as.character(Data$total.sulfur.dioxide))
Data$density <- as.numeric(as.character(Data$density))
Data$pH <- as.numeric(as.character(Data$pH))
Data$sulphates <- as.numeric(as.character(Data$sulphates))
Data$alcohol <- as.numeric(as.character(Data$alcohol))
Data$quality <- as.factor(Data$quality)
setwd("H:/coursR/DDP/cp")
Data <- read.csv2("./data/winequality-red.csv")
Data$fixed.acidity <- as.numeric(as.character(Data$fixed.acidity))
Data$volatile.acidity <- as.numeric(as.character(Data$volatile.acidity))
Data$citric.acid <- as.numeric(as.character(Data$citric.acid))
Data$residual.sugar <- as.numeric(as.character(Data$residual.sugar))
Data$chlorides <- as.numeric(as.character(Data$chlorides))
Data$free.sulfur.dioxide <- as.numeric(as.character(Data$free.sulfur.dioxide))
Data$total.sulfur.dioxide <- as.numeric(as.character(Data$total.sulfur.dioxide))
Data$density <- as.numeric(as.character(Data$density))
Data$pH <- as.numeric(as.character(Data$pH))
Data$sulphates <- as.numeric(as.character(Data$sulphates))
Data$alcohol <- as.numeric(as.character(Data$alcohol))
Data$quality <- as.factor(Data$quality)
set.seed(12344)
modFit <- train(as.numeric(quality)~citric.acid+residual.sugar+chloride, data = Data,method = "lm")
modFit
View(Data)
set.seed(12344)
modFit <- train(as.numeric(quality)~citric.acid+residual.sugar+chlorides, data = Data,method = "lm")
modFit
shiny::runApp()
set.seed(12344)
modFit <- train(as.numeric(quality)~density+pH, data = Data,method = "lm")
modFit
shiny::runApp()
